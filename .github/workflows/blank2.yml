name: build-wr802n-bridge2

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/build-wr802n-bridge.yml"

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      OWRT_VER: "18.06.9"
      TARGET: "ar71xx"
      SUBTARGET: "tiny"
      PROFILE: "tl-wr802n-v1"
      MGMT_AP_SSID: "Relay-AP"
      MGMT_AP_KEY: "Relay-AP-Password"
      UPSTREAM_SSID: "CHANGE_ME_UPSTREAM"
      UPSTREAM_KEY: "CHANGE_ME_PASS"
      LANG: "C"         # 防止 gcc --version 输出本地化
      LC_ALL: "C"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install legacy deps (gcc-10/g++-10 + python2 via deadsnakes)
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y software-properties-common ca-certificates curl
          # Python2（deadsnakes）
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update
          sudo apt-get install -y python2 python2-minimal

          # 编译与老依赖
          sudo apt-get install -y \
            build-essential \
            gcc-10 g++-10 \
            libncurses5 libncurses5-dev libtinfo5 \
            zlib1g-dev gawk gettext libssl-dev xsltproc \
            unzip file rsync wget time

          # 让 python 指向 python2（18.06 的脚本只认 python=2.x）
          if [ -x /usr/bin/python2 ] && [ ! -e /usr/bin/python ]; then
            sudo ln -s /usr/bin/python2 /usr/bin/python
          fi

          # 把系统默认 gcc/g++ 显式切到 10 版本，避免某些脚本误判
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100

          echo "Diagnostics:"
          which gcc; gcc --version | head -1
          which g++; g++ --version | head -1
          which python; python --version 2>&1
          echo "PATH=$PATH"

      - name: Download ImageBuilder
        run: |
          set -eux
          IB_TAR="openwrt-imagebuilder-${OWRT_VER}-${TARGET}-${SUBTARGET}.Linux-x86_64.tar.xz"
          IB_URL="https://downloads.openwrt.org/releases/${OWRT_VER}/targets/${TARGET}/${SUBTARGET}/${IB_TAR}"
          echo "Fetching: ${IB_URL}"
          curl -fL "${IB_URL}" -o "${IB_TAR}"
          tar xf "${IB_TAR}"
          echo "IB_DIR=$(basename "${IB_TAR}" .tar.xz)" >> $GITHUB_ENV

      - name: Create FILES tree (pure bridge + SSH)
        run: |
          set -eux
          mkdir -p files/etc/config files/etc/uci-defaults files/usr/bin

          # /etc/config/wireless
          cat > files/etc/config/wireless <<'SH'
          config wifi-device 'radio0'
                  option type 'mac80211'
                  option hwmode '11g'
                  option path 'platform/ar933x_wmac'
                  option channel 'auto'

          config wifi-iface 'sta'
                  option device 'radio0'
                  option mode 'sta'
                  option network 'wwan'
                  option ssid '__UP_SSID__'
                  option encryption 'psk2'
                  option key '__UP_KEY__'

          config wifi-iface 'ap'
                  option device 'radio0'
                  option mode 'ap'
                  option network 'lan'
                  option ssid '__AP_SSID__'
                  option encryption 'psk2'
                  option key '__AP_KEY__'
          SH
          sed -i "s/__UP_SSID__/${UPSTREAM_SSID}/" files/etc/config/wireless
          sed -i "s/__UP_KEY__/${UPSTREAM_KEY}/" files/etc/config/wireless
          sed -i "s/__AP_SSID__/${MGMT_AP_SSID}/" files/etc/config/wireless
          sed -i "s/__AP_KEY__/${MGMT_AP_KEY}/" files/etc/config/wireless

          # /etc/config/network（纯桥）
          cat > files/etc/config/network <<'SH'
          config interface 'lan'
                  option type 'bridge'
                  option ifname 'eth0'
                  option proto 'static'
                  option ipaddr '192.168.2.1'
                  option netmask '255.255.255.0'

          config interface 'wwan'
                  option proto 'dhcp'

          config interface 'stabridge'
                  option proto 'relay'
                  option network 'lan wwan'
                  option ipaddr '192.168.1.50'
          SH

          # 首启：启用 dropbear；停用 dnsmasq/firewall；reload wifi
          cat > files/etc/uci-defaults/99-relay-min <<'SH'
          #!/bin/sh
          /etc/init.d/dropbear enable 2>/dev/null
          /etc/init.d/dropbear start  2>/dev/null
          /etc/init.d/dnsmasq stop 2>/dev/null
          /etc/init.d/dnsmasq disable 2>/dev/null
          /etc/init.d/firewall stop 2>/dev/null
          /etc/init.d/firewall disable 2>/dev/null
          wifi reload 2>/dev/null
          exit 0
          SH
          chmod +x files/etc/uci-defaults/99-relay-min

          # /usr/bin/upstream-set
          cat > files/usr/bin/upstream-set <<'SH'
          #!/bin/sh
          # usage: upstream-set "<ssid>" "<pass>" [bssid]
          SSID="$1"; KEY="$2"; BSSID="$3"
          [ -z "$SSID" ] && { echo "usage: upstream-set \"<ssid>\" \"<pass>\" [bssid]"; exit 1; }
          uci set wireless.sta.ssid="$SSID"
          uci set wireless.sta.encryption='psk2'
          uci set wireless.sta.key="$KEY"
          if [ -n "$BSSID" ]; then uci set wireless.sta.bssid="$BSSID"; else uci -q delete wireless.sta.bssid; fi
          uci commit wireless
          wifi reload
          echo "Upstream set to: $SSID ${BSSID:+(BSSID $BSSID)}"
          SH
          chmod +x files/usr/bin/upstream-set

      - name: Build (ImageBuilder, verbose + prereq workaround)
        working-directory: ${{ env.IB_DIR }}
        env:
          CC: gcc
          CXX: g++
        run: |
          set -eux
          PACKAGES="dropbear relayd wpad-mini \
           -ppp -pppoe -ppp-mod-pppoe \
           -luci -uhttpd \
           -odhcpd-ipv6only -odhcp6c -ip6tables -kmod-ip6tables -kmod-ipv6 -ipv6helper \
           -dnsmasq -firewall -iptables -kmod-ipt-nat -kmod-nf-nat -kmod-nf-conntrack \
           -opkg -wget \
           -iwinfo -wireless-tools -libiwinfo -libiwinfo-lua -libjson-c -libubus-lua -liblua -lua \
           -libustream-mbedtls -libustream-openssl -libustream-wolfssl -ca-bundle -ca-certificates"


          # 先打印 IB 所见的 gcc/g++
          which gcc; gcc --version | head -1
          which g++; g++ --version | head -1
          which python; python --version 2>&1

          # 加 FORCE=1 兜底，绕过古早 prereq 的误判
          FORCE=1 make V=s image PROFILE=${PROFILE} PACKAGES="$PACKAGES" FILES=../files/ | tee ../build.log

      - name: Collect artifacts
        if: always()
        working-directory: ${{ env.IB_DIR }}
        run: |
          set -eux
          OUTDIR="bin/targets/${TARGET}/${SUBTARGET}"
          mkdir -p ../artifacts
          if [ -d "${OUTDIR}" ]; then cp ${OUTDIR}/*wr802n*bin ../artifacts/ || true; fi
          (cd ../artifacts && if ls *bin >/dev/null 2>&1; then sha256sum *bin > SHA256SUMS.txt; fi || true)
          cp ../build.log ../artifacts/ || true
          ls -lah ../artifacts

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wr802n-v1-bridge-${{ env.OWRT_VER }}
          path: artifacts
