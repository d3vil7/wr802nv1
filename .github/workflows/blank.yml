name: build-wr802n-bridge

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/build-wr802n-bridge.yml"

jobs:
  build:
    runs-on: ubuntu-22.04   # ← 固定版本，避免 24.04 的依赖坑
    env:
      OWRT_VER: "18.06.9"
      TARGET: "ar71xx"
      SUBTARGET: "tiny"
      PROFILE: "tl-wr802n-v1"
      MGMT_AP_SSID: "Relay-AP"
      MGMT_AP_KEY: "Relay-AP-Password"
      UPSTREAM_SSID: "CHANGE_ME_UPSTREAM"
      UPSTREAM_KEY: "CHANGE_ME_PASS"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare host deps for old ImageBuilder
        run: |
          sudo apt-get update
          # 这些是旧版 IB 常见必需项；多给一点以兼容不同内核/toolchain
          sudo apt-get install -y \
            build-essential \
            libncurses5 libncurses5-dev libtinfo5 \
            zlib1g-dev gawk gettext libssl-dev xsltproc \
            unzip file rsync wget curl ca-certificates \
            python3 time

      - name: Download ImageBuilder
        run: |
          set -eux
          IB_TAR="openwrt-imagebuilder-${OWRT_VER}-${TARGET}-${SUBTARGET}.Linux-x86_64.tar.xz"
          IB_URL="https://downloads.openwrt.org/releases/${OWRT_VER}/targets/${TARGET}/${SUBTARGET}/${IB_TAR}"
          echo "Fetching: ${IB_URL}"
          curl -fL "${IB_URL}" -o "${IB_TAR}"
          tar xf "${IB_TAR}"
          echo "IB_DIR=$(basename "${IB_TAR}" .tar.xz)" >> $GITHUB_ENV

      - name: Create minimal FILES (pure bridge + SSH)
        run: |
          set -eux
          mkdir -p files/etc/config files/etc/uci-defaults files/usr/bin

          cat > files/etc/config/wireless <<'SH'
          config wifi-device 'radio0'
                  option type 'mac80211'
                  option hwmode '11g'
                  option path 'platform/ar933x_wmac'
                  option channel 'auto'

          config wifi-iface 'sta'
                  option device 'radio0'
                  option mode 'sta'
                  option network 'wwan'
                  option ssid '__UP_SSID__'
                  option encryption 'psk2'
                  option key '__UP_KEY__'

          config wifi-iface 'ap'
                  option device 'radio0'
                  option mode 'ap'
                  option network 'lan'
                  option ssid '__AP_SSID__'
                  option encryption 'psk2'
                  option key '__AP_KEY__'
          SH
          sed -i "s/__UP_SSID__/${UPSTREAM_SSID}/" files/etc/config/wireless
          sed -i "s/__UP_KEY__/${UPSTREAM_KEY}/" files/etc/config/wireless
          sed -i "s/__AP_SSID__/${MGMT_AP_SSID}/" files/etc/config/wireless
          sed -i "s/__AP_KEY__/${MGMT_AP_KEY}/" files/etc/config/wireless

          cat > files/etc/config/network <<'SH'
          config interface 'lan'
                  option type 'bridge'
                  option ifname 'eth0'
                  option proto 'static'
                  option ipaddr '192.168.2.1'
                  option netmask '255.255.255.0'

          config interface 'wwan'
                  option proto 'dhcp'

          config interface 'stabridge'
                  option proto 'relay'
                  option network 'lan wwan'
                  option ipaddr '192.168.1.50'
          SH

          cat > files/etc/uci-defaults/99-relay-min <<'SH'
          #!/bin/sh
          /etc/init.d/dropbear enable 2>/dev/null
          /etc/init.d/dropbear start  2>/dev/null
          /etc/init.d/dnsmasq stop 2>/dev/null
          /etc/init.d/dnsmasq disable 2>/dev/null
          /etc/init.d/firewall stop 2>/dev/null
          /etc/init.d/firewall disable 2>/dev/null
          wifi reload 2>/dev/null
          exit 0
          SH
          chmod +x files/etc/uci-defaults/99-relay-min

          cat > files/usr/bin/upstream-set <<'SH'
          #!/bin/sh
          SSID="$1"; KEY="$2"; BSSID="$3"
          [ -z "$SSID" ] && { echo "usage: upstream-set \"<ssid>\" \"<pass>\" [bssid]"; exit 1; }
          uci set wireless.sta.ssid="$SSID"
          uci set wireless.sta.encryption='psk2'
          uci set wireless.sta.key="$KEY"
          if [ -n "$BSSID" ]; then uci set wireless.sta.bssid="$BSSID"; else uci -q delete wireless.sta.bssid; fi
          uci commit wireless
          wifi reload
          echo "Upstream set to: $SSID ${BSSID:+(BSSID $BSSID)}"
          SH
          chmod +x files/usr/bin/upstream-set

      - name: Build (ImageBuilder with verbose log)
        working-directory: ${{ env.IB_DIR }}
        run: |
          set -eux
          PACKAGES="dropbear relayd wpad-mini \
          -ppp -pppoe -ppp-mod-pppoe \
          -luci -uhttpd \
          -odhcpd-ipv6only -odhcp6c -ip6tables -kmod-ip6tables -kmod-ipv6 -ipv6helper \
          -dnsmasq -firewall -iptables -kmod-ipt-nat -kmod-nf-nat -kmod-nf-conntrack \
          -opkg -wget"
          # V=s 打开详细日志；并把日志输出到文件以便失败时上传
          make V=s image PROFILE=${PROFILE} PACKAGES="$PACKAGES" FILES=../files/ | tee ../build.log

      - name: Collect artifacts
        if: always()
        working-directory: ${{ env.IB_DIR }}
        run: |
          OUTDIR="bin/targets/${TARGET}/${SUBTARGET}"
          mkdir -p ../artifacts
          if [ -d "${OUTDIR}" ]; then cp ${OUTDIR}/*wr802n*bin ../artifacts/ || true; fi
          (cd ../artifacts && ls -lh || true)
          (cd ../artifacts && if ls *bin >/dev/null 2>&1; then sha256sum *bin > SHA256SUMS.txt; fi)
          cp ../build.log ../artifacts/ || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wr802n-v1-bridge-${{ env.OWRT_VER }}
          path: artifacts
